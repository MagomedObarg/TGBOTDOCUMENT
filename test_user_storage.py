"""
–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã UserStorage
"""

import os
import sys

sys.path.insert(0, os.path.dirname(__file__))

from telegram_doc_bot.utils.user_storage import UserStorage


def test_user_storage():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π UserStorage"""
    
    db_path = "test_user_data.db"
    
    if os.path.exists(db_path):
        os.remove(db_path)
    
    storage = UserStorage(db_path)
    
    test_user_id = 12345
    test_api_key = "AIzaSyDEMOKEY1234567890abcdefghijklmn"
    
    print("1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –∫–ª—é—á–∞ –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...")
    assert not storage.has_api_key(test_user_id), "–ö–ª—é—á –Ω–µ –¥–æ–ª–∂–µ–Ω —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å"
    print("‚úÖ Passed")
    
    print("\n2. –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ API –∫–ª—é—á–∞...")
    result = storage.set_api_key(test_user_id, test_api_key)
    assert result, "–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —É—Å–ø–µ—à–Ω—ã–º"
    print("‚úÖ Passed")
    
    print("\n3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∫–ª—é—á–∞...")
    assert storage.has_api_key(test_user_id), "–ö–ª—é—á –¥–æ–ª–∂–µ–Ω —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å"
    print("‚úÖ Passed")
    
    print("\n4. –ü–æ–ª—É—á–µ–Ω–∏–µ API –∫–ª—é—á–∞...")
    retrieved_key = storage.get_api_key(test_user_id)
    assert retrieved_key == test_api_key, "–ö–ª—é—á –¥–æ–ª–∂–µ–Ω —Å–æ–≤–ø–∞–¥–∞—Ç—å —Å —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–º"
    print(f"‚úÖ Passed (–ø–æ–ª—É—á–µ–Ω: {retrieved_key[:15]}...)")
    
    print("\n5. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ API –∫–ª—é—á–∞...")
    new_api_key = "AIzaSyNEWKEY9876543210zyxwvutsrqponml"
    result = storage.set_api_key(test_user_id, new_api_key)
    assert result, "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —É—Å–ø–µ—à–Ω—ã–º"
    updated_key = storage.get_api_key(test_user_id)
    assert updated_key == new_api_key, "–ö–ª—é—á –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ–±–Ω–æ–≤–ª—ë–Ω"
    print("‚úÖ Passed")
    
    print("\n6. –£–¥–∞–ª–µ–Ω–∏–µ API –∫–ª—é—á–∞...")
    result = storage.delete_api_key(test_user_id)
    assert result, "–£–¥–∞–ª–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —É—Å–ø–µ—à–Ω—ã–º"
    assert not storage.has_api_key(test_user_id), "–ö–ª—é—á –Ω–µ –¥–æ–ª–∂–µ–Ω —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è"
    print("‚úÖ Passed")
    
    print("\n7. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏...")
    user1 = 111
    user2 = 222
    key1 = "AIzaSyUSER1KEY567890abcdefghijklmnopq"
    key2 = "AIzaSyUSER2KEY567890abcdefghijklmnopq"
    
    storage.set_api_key(user1, key1)
    storage.set_api_key(user2, key2)
    
    assert storage.get_api_key(user1) == key1, "–ö–ª—é—á –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 1 –¥–æ–ª–∂–µ–Ω —Å–æ–≤–ø–∞–¥–∞—Ç—å"
    assert storage.get_api_key(user2) == key2, "–ö–ª—é—á –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 2 –¥–æ–ª–∂–µ–Ω —Å–æ–≤–ø–∞–¥–∞—Ç—å"
    print("‚úÖ Passed")
    
    if os.path.exists(db_path):
        os.remove(db_path)
    
    print("\n" + "="*50)
    print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
    print("="*50)


if __name__ == "__main__":
    try:
        test_user_storage()
    except AssertionError as e:
        print(f"\n‚ùå –¢–µ—Å—Ç –ø—Ä–æ–≤–∞–ª–µ–Ω: {e}")
        sys.exit(1)
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞: {e}")
        sys.exit(1)
