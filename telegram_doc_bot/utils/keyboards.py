"""
–ú–æ–¥—É–ª—å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä Telegram –±–æ—Ç–∞
"""

from aiogram.types import (
    ReplyKeyboardMarkup,
    KeyboardButton,
    InlineKeyboardMarkup,
    InlineKeyboardButton
)
from telegram_doc_bot.config import Config


def get_main_keyboard() -> ReplyKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –±–æ—Ç–∞
    
    Returns:
        –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –æ—Å–Ω–æ–≤–Ω—ã–º–∏ –∫–æ–º–∞–Ω–¥–∞–º–∏
    """
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üìù –°–æ–∑–¥–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç"), KeyboardButton(text="üìö –ò—Å—Ç–æ—Ä–∏—è")],
            [KeyboardButton(text="üîë –ú–æ–π API –∫–ª—é—á"), KeyboardButton(text="‚≠ê –ò–∑–±—Ä–∞–Ω–Ω–æ–µ")],
            [KeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"), KeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")],
            [KeyboardButton(text="‚ùì –ü–æ–º–æ—â—å"), KeyboardButton(text="‚ÑπÔ∏è –û –±–æ—Ç–µ")]
        ],
        resize_keyboard=True,
        input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é..."
    )
    return keyboard


def get_template_keyboard() -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –≤—ã–±–æ—Ä–∞ —à–∞–±–ª–æ–Ω–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞
    
    Returns:
        Inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å —à–∞–±–ª–æ–Ω–∞–º–∏
    """
    buttons = []
    row = []
    for i, (key, value) in enumerate(Config.DOCUMENT_TEMPLATES.items()):
        row.append(InlineKeyboardButton(
            text=value,
            callback_data=f"template_{key}"
        ))
        if len(row) == 2 or i == len(Config.DOCUMENT_TEMPLATES) - 1:
            buttons.append(row)
            row = []
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    return keyboard


def get_document_type_keyboard() -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞ (Word/PDF)
    
    Returns:
        Inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å —Ç–∏–ø–∞–º–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
    """
    buttons = []
    for key, value in Config.DOCUMENT_TYPES.items():
        buttons.append([InlineKeyboardButton(
            text=value,
            callback_data=f"doctype_{key}"
        )])
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    return keyboard


def get_cancel_keyboard() -> ReplyKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –∫–Ω–æ–ø–∫–æ–π –æ—Ç–º–µ–Ω—ã
    
    Returns:
        –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–æ–π "–û—Ç–º–µ–Ω–∞"
    """
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞")]
        ],
        resize_keyboard=True
    )
    return keyboard


def get_document_actions_keyboard() -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –¥–µ–π—Å—Ç–≤–∏—è–º–∏ –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–∞ –ø–æ—Å–ª–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    
    Returns:
        Inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –¥–µ–π—Å—Ç–≤–∏—è–º–∏ (—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π, –∑–∞–≤–µ—Ä—à–∏—Ç—å)
    """
    buttons = [
        [
            InlineKeyboardButton(
                text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å",
                callback_data="action_edit"
            ),
            InlineKeyboardButton(
                text="üëÅÔ∏è –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä",
                callback_data="action_preview"
            )
        ],
        [
            InlineKeyboardButton(
                text="‚≠ê –í –∏–∑–±—Ä–∞–Ω–Ω–æ–µ",
                callback_data="action_favorite"
            ),
            InlineKeyboardButton(
                text="üîÑ –î—Ä—É–≥–æ–π —Ñ–æ—Ä–º–∞—Ç",
                callback_data="action_convert"
            )
        ],
        [
            InlineKeyboardButton(
                text="üìù –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π",
                callback_data="action_new"
            ),
            InlineKeyboardButton(
                text="‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å",
                callback_data="action_finish"
            )
        ]
    ]
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    return keyboard


def get_api_key_management_keyboard(has_key: bool = False) -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è API –∫–ª—é—á–æ–º
    
    Args:
        has_key: –ï—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–π –∫–ª—é—á
    
    Returns:
        Inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –¥–µ–π—Å—Ç–≤–∏—è–º–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è API –∫–ª—é—á–æ–º
    """
    buttons = []
    
    if has_key:
        buttons.append([InlineKeyboardButton(
            text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å API –∫–ª—é—á",
            callback_data="apikey_update"
        )])
        buttons.append([InlineKeyboardButton(
            text="üóë –£–¥–∞–ª–∏—Ç—å API –∫–ª—é—á",
            callback_data="apikey_delete"
        )])
    else:
        buttons.append([InlineKeyboardButton(
            text="‚ûï –î–æ–±–∞–≤–∏—Ç—å API –∫–ª—é—á",
            callback_data="apikey_add"
        )])
    
    buttons.append([InlineKeyboardButton(
        text="‚ÑπÔ∏è –ì–¥–µ –ø–æ–ª—É—á–∏—Ç—å –∫–ª—é—á?",
        callback_data="apikey_help"
    )])
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    return keyboard


def get_api_key_confirm_keyboard() -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è API –∫–ª—é—á–∞
    
    Returns:
        Inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    """
    buttons = [
        [
            InlineKeyboardButton(
                text="‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å",
                callback_data="apikey_delete_confirm"
            ),
            InlineKeyboardButton(
                text="‚ùå –û—Ç–º–µ–Ω–∞",
                callback_data="apikey_delete_cancel"
            )
        ]
    ]
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    return keyboard


def get_language_keyboard() -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞
    
    Returns:
        Inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å —è–∑—ã–∫–∞–º–∏
    """
    buttons = []
    row = []
    for i, (key, value) in enumerate(Config.DOCUMENT_LANGUAGES.items()):
        row.append(InlineKeyboardButton(
            text=value,
            callback_data=f"lang_{key}"
        ))
        if len(row) == 2 or i == len(Config.DOCUMENT_LANGUAGES) - 1:
            buttons.append(row)
            row = []
    
    buttons.append([InlineKeyboardButton(
        text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
        callback_data="settings_back"
    )])
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    return keyboard


def get_style_keyboard() -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å—Ç–∏–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–∞
    
    Returns:
        Inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–æ —Å—Ç–∏–ª—è–º–∏
    """
    buttons = []
    for key, value in Config.DOCUMENT_STYLES.items():
        buttons.append([InlineKeyboardButton(
            text=value,
            callback_data=f"style_{key}"
        )])
    
    buttons.append([InlineKeyboardButton(
        text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
        callback_data="settings_back"
    )])
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    return keyboard


def get_settings_keyboard() -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –Ω–∞—Å—Ç—Ä–æ–µ–∫
    
    Returns:
        Inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
    """
    buttons = [
        [InlineKeyboardButton(
            text="üåç –Ø–∑—ã–∫ –¥–æ–∫—É–º–µ–Ω—Ç–∞",
            callback_data="settings_language"
        )],
        [InlineKeyboardButton(
            text="üé® –°—Ç–∏–ª—å –¥–æ–∫—É–º–µ–Ω—Ç–∞",
            callback_data="settings_style"
        )],
        [InlineKeyboardButton(
            text="üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è",
            callback_data="settings_notifications"
        )],
        [InlineKeyboardButton(
            text="üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é",
            callback_data="settings_clear_history"
        )]
    ]
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    return keyboard


def get_history_item_keyboard(doc_id: int) -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è —ç–ª–µ–º–µ–Ω—Ç–∞ –∏—Å—Ç–æ—Ä–∏–∏
    
    Args:
        doc_id: ID –¥–æ–∫—É–º–µ–Ω—Ç–∞
    
    Returns:
        Inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –¥–µ–π—Å—Ç–≤–∏—è–º–∏ –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–∞ –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏
    """
    buttons = [
        [
            InlineKeyboardButton(
                text="üì• –°–∫–∞—á–∞—Ç—å —Å–Ω–æ–≤–∞",
                callback_data=f"history_download_{doc_id}"
            ),
            InlineKeyboardButton(
                text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å",
                callback_data=f"history_edit_{doc_id}"
            )
        ],
        [
            InlineKeyboardButton(
                text="‚≠ê –í –∏–∑–±—Ä–∞–Ω–Ω–æ–µ",
                callback_data=f"history_favorite_{doc_id}"
            ),
            InlineKeyboardButton(
                text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å",
                callback_data=f"history_delete_{doc_id}"
            )
        ]
    ]
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    return keyboard


def get_variants_keyboard(count: int = 3) -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –≤—ã–±–æ—Ä–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞
    
    Args:
        count: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
    
    Returns:
        Inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏
    """
    buttons = []
    for i in range(count):
        buttons.append([InlineKeyboardButton(
            text=f"üìÑ –í–∞—Ä–∏–∞–Ω—Ç {i + 1}",
            callback_data=f"variant_{i}"
        )])
    
    buttons.append([InlineKeyboardButton(
        text="üîÑ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –µ—â—ë",
        callback_data="variant_regenerate"
    )])
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    return keyboard


def get_preview_keyboard() -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞
    
    Returns:
        Inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –¥–µ–π—Å—Ç–≤–∏—è–º–∏ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞
    """
    buttons = [
        [
            InlineKeyboardButton(
                text="‚úÖ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å",
                callback_data="preview_save"
            ),
            InlineKeyboardButton(
                text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å",
                callback_data="preview_edit"
            )
        ],
        [
            InlineKeyboardButton(
                text="üîÑ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∑–∞–Ω–æ–≤–æ",
                callback_data="preview_regenerate"
            )
        ],
        [
            InlineKeyboardButton(
                text="‚ùå –û—Ç–º–µ–Ω–∞",
                callback_data="preview_cancel"
            )
        ]
    ]
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    return keyboard
