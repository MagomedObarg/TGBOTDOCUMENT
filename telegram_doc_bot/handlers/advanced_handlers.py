"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π –±–æ—Ç–∞: –∏—Å—Ç–æ—Ä–∏—è, –∏–∑–±—Ä–∞–Ω–Ω–æ–µ, —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞, –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
"""

import logging
from datetime import datetime
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext

from telegram_doc_bot.utils.keyboards import (
    get_main_keyboard,
    get_settings_keyboard,
    get_language_keyboard,
    get_style_keyboard,
    get_history_item_keyboard
)
from telegram_doc_bot.utils.user_storage import UserStorage
from telegram_doc_bot.utils.message_helpers import safe_edit_message
from telegram_doc_bot.config import Config

logger = logging.getLogger(__name__)

router = Router()


@router.message(F.text == "üìö –ò—Å—Ç–æ—Ä–∏—è")
async def show_history(message: Message, user_storage: UserStorage):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"""
    user_id = message.from_user.id
    history = user_storage.get_history(user_id)
    
    if not history:
        await message.answer(
            "üìö <b>–ò—Å—Ç–æ—Ä–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤</b>\n\n"
            "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤.\n\n"
            "–ù–∞–∂–º–∏—Ç–µ \"üìù –°–æ–∑–¥–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç\", —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å!",
            parse_mode="HTML",
            reply_markup=get_main_keyboard()
        )
        return
    
    text = "üìö <b>–ò—Å—Ç–æ—Ä–∏—è –≤–∞—à–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤</b>\n\n"
    for i, doc in enumerate(history[-10:], 1):
        date = doc.get('date', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
        template = doc.get('template_name', '–î–æ–∫—É–º–µ–Ω—Ç')
        doc_type = doc.get('doc_type', 'docx')
        
        text += f"{i}. <b>{template}</b>\n"
        text += f"   üìÖ {date}\n"
        text += f"   üìÑ –§–æ—Ä–º–∞—Ç: {doc_type.upper()}\n\n"
    
    text += f"üìä –í—Å–µ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {len(history)}"
    
    await message.answer(
        text,
        parse_mode="HTML",
        reply_markup=get_main_keyboard()
    )
    
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–ª –∏—Å—Ç–æ—Ä–∏—é ({len(history)} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤)")


@router.message(F.text == "‚≠ê –ò–∑–±—Ä–∞–Ω–Ω–æ–µ")
async def show_favorites(message: Message, user_storage: UserStorage):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏–∑–±—Ä–∞–Ω–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã"""
    user_id = message.from_user.id
    favorites = user_storage.get_favorites(user_id)
    
    if not favorites:
        await message.answer(
            "‚≠ê <b>–ò–∑–±—Ä–∞–Ω–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã</b>\n\n"
            "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤.\n\n"
            "–ü–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞ –Ω–∞–∂–º–∏—Ç–µ \"‚≠ê –í –∏–∑–±—Ä–∞–Ω–Ω–æ–µ\", "
            "—á—Ç–æ–±—ã —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –µ–≥–æ –≤ —ç—Ç–æ–º —Ä–∞–∑–¥–µ–ª–µ.",
            parse_mode="HTML",
            reply_markup=get_main_keyboard()
        )
        return
    
    text = "‚≠ê <b>–í–∞—à–∏ –∏–∑–±—Ä–∞–Ω–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã</b>\n\n"
    for i, doc in enumerate(favorites, 1):
        template = doc.get('template_name', '–î–æ–∫—É–º–µ–Ω—Ç')
        date = doc.get('date', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
        
        text += f"{i}. <b>{template}</b>\n"
        text += f"   üìÖ {date}\n\n"
    
    text += "üí° –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –¥–æ–∫—É–º–µ–Ω—Ç, —á—Ç–æ–±—ã —Å–∫–∞—á–∞—Ç—å –µ–≥–æ —Å–Ω–æ–≤–∞"
    
    await message.answer(
        text,
        parse_mode="HTML",
        reply_markup=get_main_keyboard()
    )
    
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–ª –∏–∑–±—Ä–∞–Ω–Ω–æ–µ ({len(favorites)} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤)")


@router.message(F.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
async def show_statistics(message: Message, user_storage: UserStorage):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è"""
    user_id = message.from_user.id
    stats = user_storage.get_statistics(user_id)
    
    total_docs = stats.get('total_documents', 0)
    total_edits = stats.get('total_edits', 0)
    favorite_template = stats.get('favorite_template', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö')
    total_words = stats.get('total_words', 0)
    last_used = stats.get('last_used', '–ù–∏–∫–æ–≥–¥–∞')
    
    text = (
        "üìä <b>–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>\n\n"
        f"üìù –í—Å–µ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: <b>{total_docs}</b>\n"
        f"‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–π: <b>{total_edits}</b>\n"
        f"‚≠ê –õ—é–±–∏–º—ã–π —à–∞–±–ª–æ–Ω: <b>{favorite_template}</b>\n"
        f"üìñ –°–ª–æ–≤ –Ω–∞–ø–∏—Å–∞–Ω–æ: <b>{total_words:,}</b>\n"
        f"üïí –ü–æ—Å–ª–µ–¥–Ω–µ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: <b>{last_used}</b>\n\n"
    )
    
    if total_docs > 0:
        text += "üéâ <b>–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è:</b>\n"
        if total_docs >= 10:
            text += "üèÜ –°–æ–∑–¥–∞–Ω–æ 10+ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤\n"
        if total_docs >= 50:
            text += "üèÜ –°–æ–∑–¥–∞–Ω–æ 50+ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤\n"
        if total_edits >= 20:
            text += "‚ú® –ú–∞—Å—Ç–µ—Ä —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è\n"
        if total_words >= 10000:
            text += "üìö –ù–∞–ø–∏—Å–∞–Ω–æ 10,000+ —Å–ª–æ–≤\n"
    else:
        text += "üí° –°–æ–∑–¥–∞–π—Ç–µ —Å–≤–æ–π –ø–µ—Ä–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Å–æ–±–∏—Ä–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É!"
    
    await message.answer(
        text,
        parse_mode="HTML",
        reply_markup=get_main_keyboard()
    )
    
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–ª —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É")


@router.message(F.text == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
async def show_settings(message: Message, user_storage: UserStorage):
    """–ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = message.from_user.id
    settings = user_storage.get_settings(user_id)
    
    language = Config.DOCUMENT_LANGUAGES.get(settings.get('language', 'ru'), 'üá∑üá∫ –†—É—Å—Å–∫–∏–π')
    style = Config.DOCUMENT_STYLES.get(settings.get('style', 'formal'), 'üé© –û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π')
    notifications = "‚úÖ –í–∫–ª—é—á–µ–Ω—ã" if settings.get('notifications', True) else "‚ùå –í—ã–∫–ª—é—á–µ–Ω—ã"
    
    text = (
        "‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏</b>\n\n"
        f"üåç –Ø–∑—ã–∫ –¥–æ–∫—É–º–µ–Ω—Ç–∞: <b>{language}</b>\n"
        f"üé® –°—Ç–∏–ª—å –¥–æ–∫—É–º–µ–Ω—Ç–∞: <b>{style}</b>\n"
        f"üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: <b>{notifications}</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:"
    )
    
    await message.answer(
        text,
        parse_mode="HTML",
        reply_markup=get_settings_keyboard()
    )
    
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ç–∫—Ä—ã–ª –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")


@router.callback_query(F.data == "settings_language")
async def settings_language(callback: CallbackQuery):
    """–í—ã–±–æ—Ä —è–∑—ã–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞"""
    await safe_edit_message(
        callback.message,
        "üåç <b>–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤:</b>\n\n"
        "–î–æ–∫—É–º–µ–Ω—Ç—ã –±—É–¥—É—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å—Å—è –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —è–∑—ã–∫–µ.",
        parse_mode="HTML",
        reply_markup=get_language_keyboard(),
        send_new_on_fail=True
    )
    await callback.answer()


@router.callback_query(F.data.startswith("lang_"))
async def language_selected(callback: CallbackQuery, user_storage: UserStorage):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞"""
    language = callback.data.split("_")[1]
    user_id = callback.from_user.id
    
    user_storage.update_setting(user_id, 'language', language)
    
    lang_name = Config.DOCUMENT_LANGUAGES.get(language, '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π')
    
    await safe_edit_message(
        callback.message,
        f"‚úÖ –Ø–∑—ã–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ <b>{lang_name}</b>",
        parse_mode="HTML",
        send_new_on_fail=True
    )
    
    await callback.message.answer(
        "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!",
        reply_markup=get_main_keyboard()
    )
    
    await callback.answer()
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∏–∑–º–µ–Ω–∏–ª —è–∑—ã–∫ –Ω–∞ {language}")


@router.callback_query(F.data == "settings_style")
async def settings_style(callback: CallbackQuery):
    """–í—ã–±–æ—Ä —Å—Ç–∏–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–∞"""
    await safe_edit_message(
        callback.message,
        "üé® <b>–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∏–ª—å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤:</b>\n\n"
        "–°—Ç–∏–ª—å –≤–ª–∏—è–µ—Ç –Ω–∞ —Ç–æ–Ω –∏ —Ñ–æ—Ä–º–∞–ª—å–Ω–æ—Å—Ç—å —Ç–µ–∫—Å—Ç–∞.",
        parse_mode="HTML",
        reply_markup=get_style_keyboard(),
        send_new_on_fail=True
    )
    await callback.answer()


@router.callback_query(F.data.startswith("style_"))
async def style_selected(callback: CallbackQuery, user_storage: UserStorage):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å—Ç–∏–ª—è"""
    style = callback.data.split("_")[1]
    user_id = callback.from_user.id
    
    user_storage.update_setting(user_id, 'style', style)
    
    style_name = Config.DOCUMENT_STYLES.get(style, '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π')
    
    await safe_edit_message(
        callback.message,
        f"‚úÖ –°—Ç–∏–ª—å –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ <b>{style_name}</b>",
        parse_mode="HTML",
        send_new_on_fail=True
    )
    
    await callback.message.answer(
        "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!",
        reply_markup=get_main_keyboard()
    )
    
    await callback.answer()
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∏–∑–º–µ–Ω–∏–ª —Å—Ç–∏–ª—å –Ω–∞ {style}")


@router.callback_query(F.data == "settings_notifications")
async def settings_notifications(callback: CallbackQuery, user_storage: UserStorage):
    """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    user_id = callback.from_user.id
    settings = user_storage.get_settings(user_id)
    
    current = settings.get('notifications', True)
    new_value = not current
    
    user_storage.update_setting(user_id, 'notifications', new_value)
    
    status = "–≤–∫–ª—é—á–µ–Ω—ã" if new_value else "–≤—ã–∫–ª—é—á–µ–Ω—ã"
    emoji = "‚úÖ" if new_value else "‚ùå"
    
    await safe_edit_message(
        callback.message,
        f"{emoji} –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è <b>{status}</b>",
        parse_mode="HTML",
        send_new_on_fail=True
    )
    
    await callback.message.answer(
        "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!",
        reply_markup=get_main_keyboard()
    )
    
    await callback.answer()
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∏–∑–º–µ–Ω–∏–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–∞ {new_value}")


@router.callback_query(F.data == "settings_clear_history")
async def settings_clear_history(callback: CallbackQuery, user_storage: UserStorage):
    """–û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏"""
    user_id = callback.from_user.id
    
    count = user_storage.clear_history(user_id)
    
    await safe_edit_message(
        callback.message,
        f"üóëÔ∏è –ò—Å—Ç–æ—Ä–∏—è –æ—á–∏—â–µ–Ω–∞!\n\n"
        f"–£–¥–∞–ª–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: <b>{count}</b>",
        parse_mode="HTML",
        send_new_on_fail=True
    )
    
    await callback.message.answer(
        "–ò—Å—Ç–æ—Ä–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –æ—á–∏—â–µ–Ω–∞.",
        reply_markup=get_main_keyboard()
    )
    
    await callback.answer()
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—á–∏—Å—Ç–∏–ª –∏—Å—Ç–æ—Ä–∏—é ({count} –∑–∞–ø–∏—Å–µ–π)")


@router.callback_query(F.data == "settings_back")
async def settings_back(callback: CallbackQuery, user_storage: UserStorage):
    """–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    user_id = callback.from_user.id
    settings = user_storage.get_settings(user_id)
    
    language = Config.DOCUMENT_LANGUAGES.get(settings.get('language', 'ru'), 'üá∑üá∫ –†—É—Å—Å–∫–∏–π')
    style = Config.DOCUMENT_STYLES.get(settings.get('style', 'formal'), 'üé© –û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π')
    notifications = "‚úÖ –í–∫–ª—é—á–µ–Ω—ã" if settings.get('notifications', True) else "‚ùå –í—ã–∫–ª—é—á–µ–Ω—ã"
    
    text = (
        "‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏</b>\n\n"
        f"üåç –Ø–∑—ã–∫ –¥–æ–∫—É–º–µ–Ω—Ç–∞: <b>{language}</b>\n"
        f"üé® –°—Ç–∏–ª—å –¥–æ–∫—É–º–µ–Ω—Ç–∞: <b>{style}</b>\n"
        f"üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: <b>{notifications}</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:"
    )
    
    await safe_edit_message(
        callback.message,
        text,
        parse_mode="HTML",
        reply_markup=get_settings_keyboard(),
        send_new_on_fail=True
    )
    
    await callback.answer()


@router.callback_query(F.data == "action_favorite")
async def action_favorite(callback: CallbackQuery, state: FSMContext, user_storage: UserStorage):
    """–î–æ–±–∞–≤–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ"""
    user_id = callback.from_user.id
    data = await state.get_data()
    
    if not data.get('last_content'):
        await callback.answer("–ù–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ", show_alert=True)
        return
    
    doc_data = {
        'content': data.get('last_content'),
        'template_name': data.get('last_template_name', '–î–æ–∫—É–º–µ–Ω—Ç'),
        'template_type': data.get('last_template_type', 'custom'),
        'doc_type': data.get('last_doc_type', 'docx'),
        'user_request': data.get('last_user_request', ''),
        'date': datetime.now().strftime("%Y-%m-%d %H:%M")
    }
    
    user_storage.add_favorite(user_id, doc_data)
    
    await callback.answer("‚≠ê –î–æ–∫—É–º–µ–Ω—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ!", show_alert=True)
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –¥–æ–±–∞–≤–∏–ª –¥–æ–∫—É–º–µ–Ω—Ç –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ")


@router.callback_query(F.data == "action_preview")
async def action_preview(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞"""
    data = await state.get_data()
    content = data.get('last_content', '')
    
    if not content:
        await callback.answer("–ù–µ—Ç –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞", show_alert=True)
        return
    
    preview = content[:1000] + "..." if len(content) > 1000 else content
    
    await callback.message.answer(
        f"üëÅÔ∏è <b>–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –¥–æ–∫—É–º–µ–Ω—Ç–∞:</b>\n\n"
        f"<pre>{preview}</pre>\n\n"
        f"üìä –î–ª–∏–Ω–∞: {len(content)} —Å–∏–º–≤–æ–ª–æ–≤",
        parse_mode="HTML"
    )
    
    await callback.answer()
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä")
