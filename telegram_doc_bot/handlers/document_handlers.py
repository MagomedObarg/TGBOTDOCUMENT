"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤.
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç FSM (Finite State Machine) –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ–º —Å–æ–∑–¥–∞–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞.
"""

import logging
from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery, FSInputFile
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from telegram_doc_bot.services import GeminiService, DocumentService
from telegram_doc_bot.utils.keyboards import (
    get_main_keyboard,
    get_template_keyboard,
    get_document_type_keyboard,
    get_cancel_keyboard,
    get_document_actions_keyboard,
    get_api_key_management_keyboard
)
from telegram_doc_bot.utils.user_storage import UserStorage
from telegram_doc_bot.utils.message_helpers import safe_edit_message, safe_delete_message
from telegram_doc_bot.config import Config

logger = logging.getLogger(__name__)

# –°–æ–∑–¥–∞–Ω–∏–µ —Ä–æ—É—Ç–µ—Ä–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
router = Router()


class DocumentGeneration(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –ø—Ä–æ—Ü–µ—Å—Å–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞"""
    choosing_template = State()  # –í—ã–±–æ—Ä —à–∞–±–ª–æ–Ω–∞
    entering_request = State()   # –í–≤–æ–¥ –æ–ø–∏—Å–∞–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞
    choosing_doc_type = State()  # –í—ã–±–æ—Ä —Ç–∏–ø–∞ —Ñ–∞–π–ª–∞ (Word/PDF)
    document_ready = State()     # –î–æ–∫—É–º–µ–Ω—Ç –≥–æ—Ç–æ–≤, –º–æ–∂–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å


class DocumentEditing(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –ø—Ä–æ—Ü–µ—Å—Å–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞"""
    entering_edit_instructions = State()  # –í–≤–æ–¥ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π –ø–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é


@router.message(Command("generate"))
@router.message(F.text == "üìù –°–æ–∑–¥–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç")
async def start_document_generation(message: Message, state: FSMContext, user_storage: UserStorage):
    """
    –ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞
    
    Args:
        message: –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        state: –°–æ—Å—Ç–æ—è–Ω–∏–µ FSM
        user_storage: –•—Ä–∞–Ω–∏–ª–∏—â–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
    """
    user_id = message.from_user.id
    
    if not user_storage.has_api_key(user_id):
        await message.answer(
            "üîë <b>API –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω</b>\n\n"
            "‚ùó –î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –Ω–µ–æ–±—Ö–æ–¥–∏–º API –∫–ª—é—á Google Gemini.\n\n"
            "üéØ <b>–ß—Ç–æ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å:</b>\n"
            "1. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É \"üîë –ú–æ–π API –∫–ª—é—á\"\n"
            "2. –°–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–ª—é—á–∞\n"
            "3. –î–æ–±–∞–≤—å—Ç–µ –∫–ª—é—á –≤ –±–æ—Ç\n"
            "4. –ù–∞—á–Ω–∏—Ç–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã!\n\n"
            "üí° –≠—Ç–æ –∑–∞–π–º—ë—Ç –≤—Å–µ–≥–æ –ø–∞—Ä—É –º–∏–Ω—É—Ç, –∏ API –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ.",
            parse_mode="HTML",
            reply_markup=get_api_key_management_keyboard(has_key=False)
        )
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–æ–ø—ã—Ç–∞–ª—Å—è —Å–æ–∑–¥–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç –±–µ–∑ API –∫–ª—é—á–∞")
        return
    
    await state.clear()
    
    await message.answer(
        "üìù <b>–°–æ–∑–¥–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —à–∞–±–ª–æ–Ω–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞:",
        parse_mode="HTML",
        reply_markup=get_template_keyboard()
    )
    
    await state.set_state(DocumentGeneration.choosing_template)
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –Ω–∞—á–∞–ª —Å–æ–∑–¥–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞")


@router.callback_query(DocumentGeneration.choosing_template, F.data.startswith("template_"))
async def template_chosen(callback: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —à–∞–±–ª–æ–Ω–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞
    
    Args:
        callback: Callback –∑–∞–ø—Ä–æ—Å
        state: –°–æ—Å—Ç–æ—è–Ω–∏–µ FSM
    """
    template_type = callback.data.split("_")[1]
    template_name = Config.DOCUMENT_TEMPLATES.get(template_type, "–ü—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç")
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —à–∞–±–ª–æ–Ω–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.update_data(template_type=template_type, template_name=template_name)
    
    await safe_edit_message(
        callback.message,
        f"‚úÖ –í—ã–±—Ä–∞–Ω —à–∞–±–ª–æ–Ω: <b>{template_name}</b>",
        parse_mode="HTML"
    )
    
    await callback.message.answer(
        "üìù –¢–µ–ø–µ—Ä—å –æ–ø–∏—à–∏—Ç–µ, –∫–∞–∫–æ–π –¥–æ–∫—É–º–µ–Ω—Ç –≤–∞–º –Ω—É–∂–µ–Ω.\n\n"
        "–£–∫–∞–∂–∏—Ç–µ –≤—Å–µ –≤–∞–∂–Ω—ã–µ –¥–µ—Ç–∞–ª–∏:\n"
        "‚Ä¢ –î–ª—è –¥–æ–≥–æ–≤–æ—Ä–∞: —Å—Ç–æ—Ä–æ–Ω—ã, –ø—Ä–µ–¥–º–µ—Ç, —É—Å–ª–æ–≤–∏—è\n"
        "‚Ä¢ –î–ª—è –∑–∞—è–≤–ª–µ–Ω–∏—è: –∫–æ–º—É, –æ—Ç –∫–æ–≥–æ, —Å—É—Ç—å –ø—Ä–æ—Å—å–±—ã\n"
        "‚Ä¢ –î–ª—è —Ä–µ–∑—é–º–µ: –§–ò–û, –æ–ø—ã—Ç, –Ω–∞–≤—ã–∫–∏, –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ\n"
        "‚Ä¢ –î–ª—è –ø–∏—Å—å–º–∞: –∞–¥—Ä–µ—Å–∞—Ç, —Ç–µ–º–∞, –æ—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ\n\n"
        f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞: {Config.MAX_REQUEST_LENGTH} —Å–∏–º–≤–æ–ª–æ–≤",
        reply_markup=get_cancel_keyboard()
    )
    
    await state.set_state(DocumentGeneration.entering_request)
    await callback.answer()
    
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –≤—ã–±—Ä–∞–ª —à–∞–±–ª–æ–Ω: {template_name}")


@router.message(DocumentGeneration.entering_request, F.text == "‚ùå –û—Ç–º–µ–Ω–∞")
@router.message(Command("cancel"))
async def cancel_generation(message: Message, state: FSMContext):
    """
    –û—Ç–º–µ–Ω–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞
    
    Args:
        message: –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        state: –°–æ—Å—Ç–æ—è–Ω–∏–µ FSM
    """
    await state.clear()
    
    await message.answer(
        "‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
        reply_markup=get_main_keyboard()
    )
    
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –æ—Ç–º–µ–Ω–∏–ª —Å–æ–∑–¥–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞")


@router.message(DocumentGeneration.entering_request, F.text)
async def request_entered(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥—ë–Ω–Ω–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞
    
    Args:
        message: –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º
        state: –°–æ—Å—Ç–æ—è–Ω–∏–µ FSM
    """
    user_request = message.text
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª–∏–Ω—ã –∑–∞–ø—Ä–æ—Å–∞
    if len(user_request) > Config.MAX_REQUEST_LENGTH:
        await message.answer(
            f"‚ö†Ô∏è –í–∞—à –∑–∞–ø—Ä–æ—Å —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π ({len(user_request)} —Å–∏–º–≤–æ–ª–æ–≤).\n"
            f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞: {Config.MAX_REQUEST_LENGTH} —Å–∏–º–≤–æ–ª–æ–≤.\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–∫—Ä–∞—Ç–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
        )
        return
    
    if len(user_request) < 10:
        await message.answer(
            "‚ö†Ô∏è –û–ø–∏—Å–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–µ–µ, –∫–∞–∫–æ–π –¥–æ–∫—É–º–µ–Ω—Ç –≤–∞–º –Ω—É–∂–µ–Ω."
        )
        return
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.update_data(user_request=user_request)
    
    await message.answer(
        "‚úÖ –û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ!\n\n"
        "–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç –¥–æ–∫—É–º–µ–Ω—Ç–∞:",
        reply_markup=get_document_type_keyboard()
    )
    
    await state.set_state(DocumentGeneration.choosing_doc_type)
    
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –≤–≤—ë–ª –æ–ø–∏—Å–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞: {user_request[:50]}...")


@router.callback_query(DocumentGeneration.choosing_doc_type, F.data.startswith("doctype_"))
async def document_type_chosen(callback: CallbackQuery, state: FSMContext, 
                               user_storage: UserStorage, 
                               document_service: DocumentService):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è
    
    Args:
        callback: Callback –∑–∞–ø—Ä–æ—Å
        state: –°–æ—Å—Ç–æ—è–Ω–∏–µ FSM
        user_storage: –•—Ä–∞–Ω–∏–ª–∏—â–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
        document_service: –°–µ—Ä–≤–∏—Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
    """
    doc_type = callback.data.split("_")[1]
    user_id = callback.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è API –∫–ª—é—á–∞
    api_key = user_storage.get_api_key(user_id)
    if not api_key:
        await safe_edit_message(
            callback.message,
            "‚ùå <b>API –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω</b>\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–±–∞–≤—å—Ç–µ API –∫–ª—é—á –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤.",
            parse_mode="HTML",
            send_new_on_fail=True
        )
        await state.clear()
        await callback.answer()
        return
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Gemini —Å–µ—Ä–≤–∏—Å–∞ —Å API –∫–ª—é—á–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    gemini_service = GeminiService(api_key=api_key)
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    template_type = data.get('template_type')
    template_name = data.get('template_name')
    user_request = data.get('user_request')
    
    await safe_edit_message(
        callback.message,
        f"‚úÖ –§–æ—Ä–º–∞—Ç: <b>{Config.DOCUMENT_TYPES[doc_type]}</b>",
        parse_mode="HTML"
    )
    
    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –Ω–∞—á–∞–ª–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    status_message = await callback.message.answer(
        "‚è≥ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –¥–æ–∫—É–º–µ–Ω—Ç...\n"
        "–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å 10-30 —Å–µ–∫—É–Ω–¥. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ.",
        reply_markup=get_main_keyboard()
    )
    
    try:
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —Å –ø–æ–º–æ—â—å—é Gemini
        logger.info(f"–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {callback.from_user.id}")
        content = await gemini_service.generate_document_content(user_request, template_type)
        
        if not content:
            await safe_edit_message(
                status_message,
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞.\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç–µ –∑–∞–ø—Ä–æ—Å.",
                send_new_on_fail=True
            )
            await state.clear()
            return
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
        await safe_edit_message(
            status_message,
            "üìÑ –ö–æ–Ω—Ç–µ–Ω—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω!\n"
            "‚è≥ –°–æ–∑–¥–∞—é –¥–æ–∫—É–º–µ–Ω—Ç...",
            send_new_on_fail=True
        )
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
        if doc_type == 'docx':
            filepath = await document_service.create_word_document(
                content=content,
                title=template_name,
                user_id=callback.from_user.id
            )
        else:  # pdf
            filepath = await document_service.create_pdf_document(
                content=content,
                title=template_name,
                user_id=callback.from_user.id
            )
        
        if not filepath:
            await safe_edit_message(
                status_message,
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞.\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.",
                send_new_on_fail=True
            )
            await state.clear()
            return
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
        await safe_edit_message(
            status_message,
            "üì§ –û—Ç–ø—Ä–∞–≤–ª—è—é –¥–æ–∫—É–º–µ–Ω—Ç...",
            send_new_on_fail=True
        )
        
        # –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        document = FSInputFile(filepath)
        
        await callback.message.answer_document(
            document=document,
            caption=(
                f"‚úÖ <b>–î–æ–∫—É–º–µ–Ω—Ç –≥–æ—Ç–æ–≤!</b>\n\n"
                f"üìã –¢–∏–ø: {template_name}\n"
                f"üìÑ –§–æ—Ä–º–∞—Ç: {Config.DOCUMENT_TYPES[doc_type]}\n"
                f"üìä –†–∞–∑–º–µ—Ä –∫–æ–Ω—Ç–µ–Ω—Ç–∞: {len(content)} —Å–∏–º–≤–æ–ª–æ–≤"
            ),
            parse_mode="HTML"
        )
        
        # –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ —Å—Ç–∞—Ç—É—Å–µ
        await safe_delete_message(status_message)
        
        # –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
        document_service.cleanup_file(filepath)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        await state.update_data(
            last_content=content,
            last_template_type=template_type,
            last_template_name=template_name,
            last_doc_type=doc_type,
            last_user_request=user_request
        )
        
        # –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π —Å –¥–æ–∫—É–º–µ–Ω—Ç–æ–º
        await callback.message.answer(
            "–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ?",
            reply_markup=get_document_actions_keyboard()
        )
        
        await state.set_state(DocumentGeneration.document_ready)
        
        logger.info(f"–î–æ–∫—É–º–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {callback.from_user.id}")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞: {e}")
        await safe_edit_message(
            status_message,
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –ø–æ–∑–∂–µ.",
            send_new_on_fail=True
        )
        await state.clear()
    
    finally:
        await callback.answer()


@router.callback_query(DocumentGeneration.document_ready, F.data == "action_edit")
async def start_document_editing(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞"""
    data = await state.get_data()
    if not data.get('last_content'):
        await callback.answer("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è", show_alert=True)
        await state.clear()
        return
    
    await safe_edit_message(
        callback.message,
        "‚úèÔ∏è <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞</b>\n\n"
        "–û–ø–∏—à–∏—Ç–µ, –∫–∞–∫–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω—É–∂–Ω–æ –≤–Ω–µ—Å—Ç–∏ –≤ –¥–æ–∫—É–º–µ–Ω—Ç.\n\n"
        "–ü—Ä–∏–º–µ—Ä—ã –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π:\n"
        "‚Ä¢ '–î–æ–±–∞–≤—å —Ä–∞–∑–¥–µ–ª –æ –≥–∞—Ä–∞–Ω—Ç–∏—è—Ö'\n"
        "‚Ä¢ '–°–¥–µ–ª–∞–π —Ç–µ–∫—Å—Ç –∫–æ—Ä–æ—á–µ –∏ –ª–∞–∫–æ–Ω–∏—á–Ω–µ–µ'\n"
        "‚Ä¢ '–ò–∑–º–µ–Ω–∏ —Ç–æ–Ω –Ω–∞ –±–æ–ª–µ–µ —Ñ–æ—Ä–º–∞–ª—å–Ω—ã–π'\n"
        "‚Ä¢ '–î–æ–±–∞–≤—å –±–æ–ª—å—à–µ –¥–µ—Ç–∞–ª–µ–π –æ...'\n"
        "‚Ä¢ '–£–±–µ—Ä–∏ —Ä–∞–∑–¥–µ–ª –æ...'",
        parse_mode="HTML",
        reply_markup=None,
        send_new_on_fail=True
    )
    
    await callback.message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é:",
        reply_markup=get_cancel_keyboard()
    )
    
    await state.set_state(DocumentEditing.entering_edit_instructions)
    await callback.answer()


@router.callback_query(DocumentGeneration.document_ready, F.data == "action_new")
async def start_new_document(callback: CallbackQuery, state: FSMContext, user_storage: UserStorage):
    """–ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞"""
    await state.clear()
    await callback.answer()
    await start_document_generation(callback.message, state, user_storage)


@router.callback_query(DocumentGeneration.document_ready, F.data == "action_finish")
async def finish_document_flow(callback: CallbackQuery, state: FSMContext):
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã —Å –¥–æ–∫—É–º–µ–Ω—Ç–æ–º"""
    await state.clear()
    await safe_edit_message(
        callback.message,
        "‚úÖ –†–∞–±–æ—Ç–∞ —Å –¥–æ–∫—É–º–µ–Ω—Ç–æ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∞.",
        reply_markup=None,
        send_new_on_fail=True
    )
    await callback.message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_main_keyboard()
    )
    await callback.answer()


@router.message(DocumentEditing.entering_edit_instructions, F.text == "‚ùå –û—Ç–º–µ–Ω–∞")
@router.message(DocumentEditing.entering_edit_instructions, Command("cancel"))
async def cancel_editing(message: Message, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    data = await state.get_data()
    if data.get('last_content'):
        await message.answer(
            "‚ùå –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
            reply_markup=get_main_keyboard()
        )
        await message.answer(
            "–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ?",
            reply_markup=get_document_actions_keyboard()
        )
        await state.set_state(DocumentGeneration.document_ready)
    else:
        await message.answer(
            "‚ùå –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
            reply_markup=get_main_keyboard()
        )
        await state.clear()


@router.message(DocumentEditing.entering_edit_instructions, F.text)
async def process_edit_instructions(
    message: Message,
    state: FSMContext,
    user_storage: UserStorage,
    document_service: DocumentService
):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π –ø–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é –¥–æ–∫—É–º–µ–Ω—Ç–∞"""
    instructions = message.text.strip()
    user_id = message.from_user.id
    
    if len(instructions) < 5:
        await message.answer(
            "‚ö†Ô∏è –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–µ. –û–ø–∏—à–∏—Ç–µ, —á—Ç–æ –Ω—É–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ.",
            reply_markup=get_cancel_keyboard()
        )
        return
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è API –∫–ª—é—á–∞
    api_key = user_storage.get_api_key(user_id)
    if not api_key:
        await message.answer(
            "‚ùå <b>API –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω</b>\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–±–∞–≤—å—Ç–µ API –∫–ª—é—á –ø–µ—Ä–µ–¥ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤.",
            parse_mode="HTML",
            reply_markup=get_main_keyboard()
        )
        await state.clear()
        return
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Gemini —Å–µ—Ä–≤–∏—Å–∞ —Å API –∫–ª—é—á–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    gemini_service = GeminiService(api_key=api_key)
    
    data = await state.get_data()
    last_content = data.get('last_content')
    template_type = data.get('last_template_type', 'custom')
    template_name = data.get('last_template_name', '–î–æ–∫—É–º–µ–Ω—Ç')
    doc_type = data.get('last_doc_type', 'docx')
    
    if not last_content:
        await message.answer(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–π –¥–æ–∫—É–º–µ–Ω—Ç –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è. –ù–∞—á–Ω–∏—Ç–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∑–∞–Ω–æ–≤–æ.",
            reply_markup=get_main_keyboard()
        )
        await state.clear()
        return
    
    status_message = await message.answer(
        "‚úèÔ∏è –ü—Ä–∏–º–µ–Ω—è—é –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫ –¥–æ–∫—É–º–µ–Ω—Ç—É...\n"
        "–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å 10-30 —Å–µ–∫—É–Ω–¥."
    )
    
    try:
        logger.info(
            f"–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id} —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏: {instructions[:50]}..."
        )
        updated_content = await gemini_service.edit_document_content(
            original_content=last_content,
            edit_instructions=instructions,
            template_type=template_type
        )
        
        if not updated_content:
            await safe_edit_message(
                status_message,
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–º–µ–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –∏–Ω–∞—á–µ.",
                send_new_on_fail=True
            )
            await state.set_state(DocumentGeneration.document_ready)
            return
        
        await safe_edit_message(
            status_message,
            "üìÑ –ò–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–∏–º–µ–Ω–µ–Ω—ã. –°–æ–∑–¥–∞—é –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç...",
            send_new_on_fail=True
        )
        
        if doc_type == 'docx':
            filepath = await document_service.create_word_document(
                content=updated_content,
                title=template_name,
                user_id=message.from_user.id
            )
        else:
            filepath = await document_service.create_pdf_document(
                content=updated_content,
                title=template_name,
                user_id=message.from_user.id
            )
        
        if not filepath:
            await safe_edit_message(
                status_message,
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.",
                send_new_on_fail=True
            )
            await state.set_state(DocumentGeneration.document_ready)
            return
        
        await safe_edit_message(
            status_message,
            "üì§ –û—Ç–ø—Ä–∞–≤–ª—è—é –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç...",
            send_new_on_fail=True
        )
        document = FSInputFile(filepath)
        
        await message.answer_document(
            document=document,
            caption=(
                f"‚úÖ <b>–î–æ–∫—É–º–µ–Ω—Ç –æ–±–Ω–æ–≤–ª—ë–Ω!</b>\n\n"
                f"üìã –¢–∏–ø: {template_name}\n"
                f"üìÑ –§–æ—Ä–º–∞—Ç: {Config.DOCUMENT_TYPES.get(doc_type, doc_type)}\n"
                f"üìä –†–∞–∑–º–µ—Ä –∫–æ–Ω—Ç–µ–Ω—Ç–∞: {len(updated_content)} —Å–∏–º–≤–æ–ª–æ–≤"
            ),
            parse_mode="HTML"
        )
        
        document_service.cleanup_file(filepath)
        await safe_delete_message(status_message)
        
        await state.update_data(
            last_content=updated_content,
            last_doc_type=doc_type
        )
        
        await message.answer(
            "–•–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç?",
            reply_markup=get_document_actions_keyboard()
        )
        await state.set_state(DocumentGeneration.document_ready)
        
        logger.info(f"–î–æ–∫—É–º–µ–Ω—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id} —É—Å–ø–µ—à–Ω–æ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞: {e}")
        await safe_edit_message(
            status_message,
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            send_new_on_fail=True
        )
        await state.clear()
