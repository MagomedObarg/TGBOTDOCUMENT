"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è API –∫–ª—é—á–∞–º–∏ Gemini
"""

import logging
import re
from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from telegram_doc_bot.utils.keyboards import (
    get_main_keyboard,
    get_cancel_keyboard,
    get_api_key_management_keyboard,
    get_api_key_confirm_keyboard
)
from telegram_doc_bot.utils.user_storage import UserStorage
from telegram_doc_bot.utils.message_helpers import safe_edit_message

logger = logging.getLogger(__name__)

router = Router()

user_storage = UserStorage()


class APIKeySetup(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ API –∫–ª—é—á–∞"""
    entering_key = State()


@router.message(F.text == "üîë –ú–æ–π API –∫–ª—é—á")
@router.message(Command("apikey"))
async def show_api_key_status(message: Message):
    """
    –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å API –∫–ª—é—á–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    
    Args:
        message: –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    user_id = message.from_user.id
    has_key = user_storage.has_api_key(user_id)
    
    if has_key:
        status_text = (
            "üîë <b>–í–∞—à API –∫–ª—é—á Gemini</b>\n\n"
            "‚úÖ <b>–°—Ç–∞—Ç—É—Å:</b> –ê–∫—Ç–∏–≤–µ–Ω\n\n"
            "üìå –í–∞—à API –∫–ª—é—á —Å–æ—Ö—Ä–∞–Ω—ë–Ω –∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤.\n\n"
            "üí° –í—ã –º–æ–∂–µ—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å –∏–ª–∏ —É–¥–∞–ª–∏—Ç—å –∫–ª—é—á, –∏—Å–ø–æ–ª—å–∑—É—è –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ."
        )
    else:
        status_text = (
            "üîë <b>API –∫–ª—é—á Gemini</b>\n\n"
            "‚ùå <b>–°—Ç–∞—Ç—É—Å:</b> –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω\n\n"
            "üìå –î–ª—è —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º API –∫–ª—é—á Google Gemini.\n\n"
            "üéØ <b>–ü–æ—á–µ–º—É —ç—Ç–æ –Ω—É–∂–Ω–æ?</b>\n"
            "‚Ä¢ –ö–ª—é—á –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤\n"
            "‚Ä¢ –í–∞—à –∫–ª—é—á —Ö—Ä–∞–Ω–∏—Ç—Å—è –±–µ–∑–æ–ø–∞—Å–Ω–æ –∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –≤–∞–º–∏\n"
            "‚Ä¢ –≠—Ç–æ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π —Å–µ—Ä–≤–∏—Å –æ—Ç Google (–≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –ª–∏–º–∏—Ç–æ–≤)\n\n"
            "üëá –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –∫–ª—é—á"
        )
    
    await message.answer(
        status_text,
        parse_mode="HTML",
        reply_markup=get_api_key_management_keyboard(has_key=has_key)
    )
    
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–ª —Å—Ç–∞—Ç—É—Å API –∫–ª—é—á–∞")


@router.callback_query(F.data == "apikey_add")
@router.callback_query(F.data == "apikey_update")
async def start_api_key_setup(callback: CallbackQuery, state: FSMContext):
    """
    –ù–∞—á–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è/–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è API –∫–ª—é—á–∞
    
    Args:
        callback: Callback –∑–∞–ø—Ä–æ—Å
        state: –°–æ—Å—Ç–æ—è–Ω–∏–µ FSM
    """
    is_update = callback.data == "apikey_update"
    action = "–æ–±–Ω–æ–≤–∏—Ç—å" if is_update else "–¥–æ–±–∞–≤–∏—Ç—å"
    
    await safe_edit_message(
        callback.message,
        f"üîë <b>{'–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ' if is_update else '–î–æ–±–∞–≤–ª–µ–Ω–∏–µ'} API –∫–ª—é—á–∞</b>\n\n"
        f"üìù –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à API –∫–ª—é—á Google Gemini.\n\n"
        f"‚ö†Ô∏è <b>–í–∞–∂–Ω–æ:</b>\n"
        f"‚Ä¢ –ö–ª—é—á –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å 'AIza'\n"
        f"‚Ä¢ –ë—É–¥—å—Ç–µ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω—ã –ø—Ä–∏ –≤–≤–æ–¥–µ\n"
        f"‚Ä¢ –ö–ª—é—á –±—É–¥–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ –∑–∞—â–∏—â—ë–Ω–Ω–æ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ\n"
        f"‚Ä¢ –ù–∏–∫—Ç–æ –∫—Ä–æ–º–µ –≤–∞—Å –Ω–µ —Å–º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤–∞—à –∫–ª—é—á\n\n"
        f"‚ùå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã",
        parse_mode="HTML",
        send_new_on_fail=True
    )
    
    await state.set_state(APIKeySetup.entering_key)
    await callback.answer()
    
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –Ω–∞—á–∞–ª {action} API –∫–ª—é—á")


@router.callback_query(F.data == "apikey_help")
async def show_api_key_help(callback: CallbackQuery):
    """
    –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –ø–æ –ø–æ–ª—É—á–µ–Ω–∏—é API –∫–ª—é—á–∞
    
    Args:
        callback: Callback –∑–∞–ø—Ä–æ—Å
    """
    help_text = (
        "üîë <b>–ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å API –∫–ª—é—á Gemini?</b>\n\n"
        
        "üìù <b>–ü–æ—à–∞–≥–æ–≤–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:</b>\n\n"
        
        "1Ô∏è‚É£ –ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ —Å–∞–π—Ç Google AI Studio:\n"
        "üîó <code>https://aistudio.google.com/app/apikey</code>\n\n"
        
        "2Ô∏è‚É£ –í–æ–π–¥–∏—Ç–µ –≤ —Å–≤–æ–π Google –∞–∫–∫–∞—É–Ω—Ç\n\n"
        
        "3Ô∏è‚É£ –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É <b>\"Create API key\"</b> –∏–ª–∏ <b>\"Get API key\"</b>\n\n"
        
        "4Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–µ–∫—Ç –∏–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π\n\n"
        
        "5Ô∏è‚É£ –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –∫–ª—é—á (–Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å AIza...)\n\n"
        
        "6Ô∏è‚É£ –í–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –±–æ—Ç –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–ª—é—á\n\n"
        
        "üí° <b>–í–∞–∂–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</b>\n"
        "‚Ä¢ API –∫–ª—é—á –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ\n"
        "‚Ä¢ –ï—Å—Ç—å –ª–∏–º–∏—Ç—ã –∑–∞–ø—Ä–æ—Å–æ–≤ (–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–ª—è –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)\n"
        "‚Ä¢ –ö–ª—é—á –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –≤–∞—à–µ–º—É Google –∞–∫–∫–∞—É–Ω—Ç—É\n"
        "‚Ä¢ –ù–µ –¥–µ–ª–∏—Ç–µ—Å—å –∫–ª—é—á–æ–º —Å –¥—Ä—É–≥–∏–º–∏ –ª—é–¥—å–º–∏\n\n"
        
        "‚ùì –ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é Google AI Studio"
    )
    
    await safe_edit_message(
        callback.message,
        help_text,
        parse_mode="HTML",
        reply_markup=get_api_key_management_keyboard(has_key=False),
        send_new_on_fail=True
    )
    
    await callback.answer()


@router.message(APIKeySetup.entering_key, Command("cancel"))
async def cancel_api_key_setup(message: Message, state: FSMContext):
    """
    –û—Ç–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É API –∫–ª—é—á–∞
    
    Args:
        message: –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        state: –°–æ—Å—Ç–æ—è–Ω–∏–µ FSM
    """
    await state.clear()
    
    await message.answer(
        "‚ùå –ù–∞—Å—Ç—Ä–æ–π–∫–∞ API –∫–ª—é—á–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.",
        reply_markup=get_main_keyboard()
    )
    
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –æ—Ç–º–µ–Ω–∏–ª –Ω–∞—Å—Ç—Ä–æ–π–∫—É API –∫–ª—é—á–∞")


@router.message(APIKeySetup.entering_key, F.text)
async def process_api_key(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥—ë–Ω–Ω–æ–≥–æ API –∫–ª—é—á–∞
    
    Args:
        message: –°–æ–æ–±—â–µ–Ω–∏–µ —Å API –∫–ª—é—á–æ–º
        state: –°–æ—Å—Ç–æ—è–Ω–∏–µ FSM
    """
    api_key = message.text.strip()
    user_id = message.from_user.id
    
    if not api_key:
        await message.answer(
            "‚ö†Ô∏è API –∫–ª—é—á –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã."
        )
        return
    
    if not re.match(r'^AIza[0-9A-Za-z_-]{35}$', api_key):
        await message.answer(
            "‚ùå <b>–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç API –∫–ª—é—á–∞</b>\n\n"
            "API –∫–ª—é—á Google Gemini –¥–æ–ª–∂–µ–Ω:\n"
            "‚Ä¢ –ù–∞—á–∏–Ω–∞—Ç—å—Å—è —Å 'AIza'\n"
            "‚Ä¢ –°–æ–¥–µ—Ä–∂–∞—Ç—å 39 —Å–∏–º–≤–æ–ª–æ–≤\n"
            "‚Ä¢ –°–æ—Å—Ç–æ—è—Ç—å –∏–∑ –±—É–∫–≤, —Ü–∏—Ñ—Ä, –¥–µ—Ñ–∏—Å–æ–≤ –∏ –ø–æ–¥—á—ë—Ä–∫–∏–≤–∞–Ω–∏–π\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–ª—é—á –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.\n"
            "–ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã.",
            parse_mode="HTML"
        )
        return
    
    try:
        await message.delete()
    except Exception:
        pass
    
    if user_storage.set_api_key(user_id, api_key):
        success_text = (
            "‚úÖ <b>API –∫–ª—é—á —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω!</b>\n\n"
            "üéâ –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã.\n\n"
            "üìù –ù–∞–∂–º–∏—Ç–µ \"–°–æ–∑–¥–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç\" –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /generate\n\n"
            "üîí –í–∞—à –∫–ª—é—á –Ω–∞–¥—ë–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω –∏ –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Ç–æ–ª—å–∫–æ –¥–ª—è –≤–∞—à–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤."
        )
        
        await message.answer(
            success_text,
            parse_mode="HTML",
            reply_markup=get_main_keyboard()
        )
        
        await state.clear()
        logger.info(f"API –∫–ª—é—á —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    else:
        await message.answer(
            "‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∫–ª—é—á–∞</b>\n\n"
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ API –∫–ª—é—á–∞. "
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
            parse_mode="HTML",
            reply_markup=get_main_keyboard()
        )
        await state.clear()
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å API –∫–ª—é—á –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")


@router.callback_query(F.data == "apikey_delete")
async def confirm_api_key_deletion(callback: CallbackQuery):
    """
    –ó–∞–ø—Ä–æ—Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è API –∫–ª—é—á–∞
    
    Args:
        callback: Callback –∑–∞–ø—Ä–æ—Å
    """
    await safe_edit_message(
        callback.message,
        "üóë <b>–£–¥–∞–ª–µ–Ω–∏–µ API –∫–ª—é—á–∞</b>\n\n"
        "‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –≤–∞—à API –∫–ª—é—á?\n\n"
        "–ü–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è:\n"
        "‚Ä¢ –í—ã –Ω–µ —Å–º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã\n"
        "‚Ä¢ –í–∞–º –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–±–∞–≤–∏—Ç—å –∫–ª—é—á –∑–∞–Ω–æ–≤–æ\n\n"
        "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —É–¥–∞–ª–µ–Ω–∏–µ:",
        parse_mode="HTML",
        reply_markup=get_api_key_confirm_keyboard(),
        send_new_on_fail=True
    )
    
    await callback.answer()


@router.callback_query(F.data == "apikey_delete_confirm")
async def delete_api_key(callback: CallbackQuery):
    """
    –£–¥–∞–ª–µ–Ω–∏–µ API –∫–ª—é—á–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    
    Args:
        callback: Callback –∑–∞–ø—Ä–æ—Å
    """
    user_id = callback.from_user.id
    
    if user_storage.delete_api_key(user_id):
        await safe_edit_message(
            callback.message,
            "‚úÖ <b>API –∫–ª—é—á —É–¥–∞–ª—ë–Ω</b>\n\n"
            "–í–∞—à API –∫–ª—é—á –±—ã–ª —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω –∏–∑ —Å–∏—Å—Ç–µ–º—ã.\n\n"
            "–ß—Ç–æ–±—ã —Å–Ω–æ–≤–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç, –¥–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π –∫–ª—é—á —á–µ—Ä–µ–∑:\n"
            "üîë –ú–æ–π API –∫–ª—é—á",
            parse_mode="HTML",
            send_new_on_fail=True
        )
        
        logger.info(f"API –∫–ª—é—á —É–¥–∞–ª—ë–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    else:
        await safe_edit_message(
            callback.message,
            "‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏</b>\n\n"
            "–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å API –∫–ª—é—á. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            parse_mode="HTML",
            send_new_on_fail=True
        )
        
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å API –∫–ª—é—á –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    
    await callback.answer()


@router.callback_query(F.data == "apikey_delete_cancel")
async def cancel_api_key_deletion(callback: CallbackQuery):
    """
    –û—Ç–º–µ–Ω–∞ —É–¥–∞–ª–µ–Ω–∏—è API –∫–ª—é—á–∞
    
    Args:
        callback: Callback –∑–∞–ø—Ä–æ—Å
    """
    await safe_edit_message(
        callback.message,
        "‚úÖ –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. –í–∞—à API –∫–ª—é—á —Å–æ—Ö—Ä–∞–Ω—ë–Ω.",
        parse_mode="HTML",
        send_new_on_fail=True
    )
    
    await show_api_key_status(callback.message)
    await callback.answer()
